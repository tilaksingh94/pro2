{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Form, Icon, Input, Button, Checkbox, Spin } from 'antd';\nimport ErrorHandling from '../../components/config/api/ErrorHandling';\nimport PostData from '../../components/config/api/PostData';\nimport { Redirect } from 'react-router-dom';\nimport Link from 'next/link';\nimport Layout from '../../components/include/Layout';\nimport Router from 'next/router';\n\nvar NormalRegisterForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(NormalRegisterForm, _React$Component);\n\n  function NormalRegisterForm(props) {\n    var _this;\n\n    _classCallCheck(this, NormalRegisterForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NormalRegisterForm).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          _this.setState({\n            loading: true\n          });\n\n          PostData('register', 'POST', values).then(function (result) {\n            var responseJson = result;\n\n            if (responseJson.success) {\n              localStorage.setItem('token', responseJson.data.token);\n              localStorage.setItem('profile_stage', responseJson.data.profile_stage);\n              localStorage.setItem('name', responseJson.data.name);\n              localStorage.setItem('entity_id_fk', responseJson.data.entity_id_fk);\n\n              _this.setState({\n                redirectToReferrer: true,\n                ServerMessage: responseJson.message,\n                ServerMessageType: 'success'\n              });\n\n              if (responseJson.data.entity_type_id_fk == null) {\n                Router.push('/register/type');\n              } else if (responseJson.data.profile_stage < 4 && responseJson.data.entity_type_id_fk != 3) {\n                Router.push('register/steps');\n              } else {\n                Router.push('/dashboard');\n              }\n            } else if (responseJson.success == false) {\n              _this.setState({\n                loading: false,\n                ServerMessage: responseJson.message,\n                ServerValidation: responseJson.data\n              });\n            }\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"compareToFirstPassword\", function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    });\n\n    _this.state = {\n      redirectToReferrer: false,\n      ServerValidation: [],\n      ServerMessage: '',\n      ServerMessageType: 'error',\n      loading: false,\n      token: null\n    };\n    return _this;\n  }\n\n  _createClass(NormalRegisterForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.setState({\n                token: localStorage.getItem('token')\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 6\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 18\n          }\n        }\n      };\n\n      if (this.state.redirectToReferrer || this.state.token) {\n        Router.push('/dashboard');\n      }\n\n      var errors = '';\n\n      if (this.state.ServerMessage) {\n        errors = ErrorHandling(this.state.ServerMessage, this.state.ServerValidation, this.state.ServerMessageType);\n      }\n\n      return __jsx(Layout, null, __jsx(\"div\", {\n        className: \"site-blocks-cover inner-page-cover overlay bg-dark\",\n        \"data-aos\": \"fade\",\n        \"data-stellar-background-ratio\": \"0.5\"\n      }, __jsx(\"div\", {\n        className: \"container\"\n      }, __jsx(\"div\", {\n        className: \"row align-items-center justify-content-center text-center\"\n      }, __jsx(\"div\", {\n        className: \"col-md-10\"\n      }, __jsx(\"div\", {\n        className: \"row justify-content-center mb-1\"\n      }, __jsx(\"div\", {\n        className: \"col-md-10 text-center\"\n      }, __jsx(\"h3\", {\n        className: \"text-center text-white\"\n      }, \" Create your  Account\"))))))), __jsx(\"div\", {\n        className: \"site-section bg-light\"\n      }, __jsx(\"div\", {\n        className: \"container\"\n      }, __jsx(\"div\", {\n        className: \"row\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6 offset-md-3 p-5 bg-white mt-10 shadow rounded\",\n        style: {\n          marginTop: \"-200px\"\n        }\n      }, errors, __jsx(Spin, {\n        spinning: this.state.loading,\n        size: \"large\"\n      }, __jsx(Form, _extends({\n        onSubmit: this.handleSubmit\n      }, formItemLayout, {\n        className: \"login-form\"\n      }), __jsx(Form.Item, {\n        label: \"Name\",\n        hasFeedback: true\n      }, getFieldDecorator('name', {\n        rules: [{\n          required: true,\n          message: 'Please input your name!'\n        }]\n      })(__jsx(Input, {\n        autoFocus: true,\n        autoComplete: \"\",\n        prefix: __jsx(Icon, {\n          type: \"user\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          }\n        }),\n        placeholder: \"Name\",\n        size: \"large\"\n      }))), __jsx(Form.Item, {\n        label: \"E-mail\",\n        hasFeedback: true\n      }, getFieldDecorator('email', {\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }]\n      })(__jsx(Input, {\n        autoComplete: \"\",\n        prefix: __jsx(Icon, {\n          type: \"mail\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          }\n        }),\n        placeholder: \"Email\",\n        size: \"large\"\n      }))), __jsx(Form.Item, {\n        label: \"Password\",\n        hasFeedback: true\n      }, getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Please input your Password!'\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(__jsx(Input.Password, {\n        prefix: __jsx(Icon, {\n          type: \"lock\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          }\n        }),\n        type: \"password\",\n        placeholder: \"Password\",\n        size: \"large\"\n      }))), __jsx(Form.Item, {\n        label: \"Confirm\",\n        hasFeedback: true\n      }, getFieldDecorator('confirm', {\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(__jsx(Input.Password, {\n        onBlur: this.handleConfirmBlur,\n        prefix: __jsx(Icon, {\n          type: \"lock\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          }\n        }),\n        type: \"password\",\n        placeholder: \"Confirm Password\",\n        size: \"large\"\n      }))), __jsx(Form.Item, {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 20,\n            offset: 6\n          }\n        }\n      }, __jsx(Button, {\n        type: \"primary\",\n        size: \"default\",\n        loading: this.state.loading,\n        htmlType: \"submit\",\n        className: \"login-form-button\"\n      }, \"Register\"), __jsx(\"br\", null), \"Or do you have an account, click here \", __jsx(Link, {\n        href: \"/login\"\n      }, __jsx(\"a\", null, \"Login\"))))))))));\n    }\n  }]);\n\n  return NormalRegisterForm;\n}(React.Component);\n\nvar WrappedNormalLoginForm = Form.create({\n  name: 'get_started'\n})(NormalRegisterForm);\nexport default WrappedNormalLoginForm;","map":null,"metadata":{},"sourceType":"module"}