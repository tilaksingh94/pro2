{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Form, Icon, Button, Select, Switch } from 'antd';\nimport PostData from '../config/api/AuthorizedPost';\nimport ErrorHandling from '../config/api/ErrorHandling';\nimport PostGetData from '../config/api/AuthorizedGet';\nconst {\n  Option\n} = Select;\n\nclass WorkoutDetails extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          const DataSend = {\n            services: values.services,\n            onlyServices: true\n          };\n          this.setState({\n            loading: true\n          });\n          let url = 'entity/' + localStorage.getItem('entity_id_fk');\n          PostData(url, 'PUT', DataSend).then(result => {\n            let responseJson = result;\n\n            if (responseJson.success) {\n              this.setState({\n                redirectToReferrer: true,\n                loading: false,\n                ServerMessage: responseJson.message,\n                ServerMessageType: 'success'\n              });\n              localStorage.setItem('profile_stage', '3');\n              window.location.reload(false);\n            } else if (responseJson.success == false) {\n              this.setState({\n                loading: false,\n                ServerMessage: responseJson.message,\n                ServerValidation: responseJson.data\n              });\n            }\n          });\n        }\n      });\n    });\n\n    this.state = {\n      ServerValidation: [],\n      ServerMessage: '',\n      ServerMessageType: 'error',\n      loading: false,\n      startup_on: null,\n      WorkOutList: []\n    };\n  }\n\n  componentDidMount() {\n    PostGetData('entity-services').then(result => {\n      this.setState({\n        WorkOutList: result.data\n      });\n    });\n  }\n\n  render() {\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 3\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 18\n        }\n      }\n    };\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    let errors = '';\n\n    if (this.state.ServerMessage) {\n      errors = ErrorHandling(this.state.ServerMessage, this.state.ServerValidation, this.state.ServerMessageType);\n    }\n\n    const children = [];\n    Object.entries(this.state.WorkOutList).map(([key, value]) => children.push(__jsx(Option, {\n      key: value.id\n    }, value.name)));\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-md-8 offset-md-2\"\n    }, errors, __jsx(\"br\", null))), __jsx(Form, _extends({\n      onSubmit: this.handleSubmit\n    }, formItemLayout, {\n      className: \"location-details-form\"\n    }), __jsx(Form.Item, {\n      label: \"Available\"\n    }, getFieldDecorator('services', {\n      rules: [{\n        required: true,\n        message: 'Please input your State/City!'\n      }]\n    })(__jsx(Select, {\n      mode: \"multiple\",\n      size: \"large\",\n      placeholder: \"Please select\"\n    }, children))), __jsx(Form.Item, {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 20,\n          offset: 4\n        }\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      size: \"default\",\n      loading: this.state.loading,\n      htmlType: \"submit\",\n      className: \"login-form-button\"\n    }, \"Save\"))));\n  }\n\n}\n\nconst WorkoutDetailsForm = Form.create({\n  name: 'location_details'\n})(WorkoutDetails);\nexport default WorkoutDetailsForm;","map":null,"metadata":{},"sourceType":"module"}